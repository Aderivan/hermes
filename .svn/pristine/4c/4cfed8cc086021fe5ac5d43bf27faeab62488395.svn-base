package br.com.apsinformatica.dao;

import java.sql.DriverManager;
import java.sql.SQLException;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.eclipse.persistence.jpa.PersistenceProvider;

public class PersistenceDao {

	private static PersistenceDao instance;
	protected EntityManager entityManager;	

	private PersistenceDao() {
		 
	}

	public static PersistenceDao instance() {
		if (instance == null) {
			instance = new PersistenceDao();
		}
		return instance;
	}
	
	public EntityManager getEntityManager() {		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("mysqlConection");
		if (entityManager == null) {
			entityManager = factory.createEntityManager();
		}
		return entityManager;
	}

	public void beginTransaction() {
		getEntityManager().getTransaction().begin();
	}

	public void persist(Object o) {
		try {
			beginTransaction();
			getEntityManager().persist(o);
			commit();
		} catch (Exception e) {
			rollback();
			e.printStackTrace();
		} finally {
			close();
		}
	}

	public void merge(Object o) {
		try {
			beginTransaction();
			getEntityManager().merge(o);
			commit();
		} catch (Exception e) {
			rollback();
			e.printStackTrace();
		} finally {
			close();
		}
	}

	public void remove(Object o) {
		try {
			beginTransaction();
			getEntityManager().remove(o);
			commit();
		} catch (Exception e) {
			rollback();
			e.printStackTrace();
		} finally {
			close();
		}
	}

	public void commit() {
		getEntityManager().getTransaction().commit();
	}

	public void rollback() {
		getEntityManager().getTransaction().rollback();
	}

	public void close() {
		if (getEntityManager().isOpen()) {
			getEntityManager().close();
		}
	}

}
